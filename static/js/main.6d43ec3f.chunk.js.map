{"version":3,"sources":["List/Lista.js","FormContact/FormContact.js","Menu/Menu.js","App.js","serviceWorker.js","index.js"],"names":["Lista","_ref","infos","title","infoList","length","map","i","id","react_default","a","createElement","className","info","FormContact","state","name","email","topic","message","changeValue","e","_this","setState","Object","defineProperty","target","value","formSubmit","preventDefault","console","log","onSubmit","this","htmlFor","type","onChange","Component","Menu","href","App","habilidades","languages","axios","get","then","res","src_Menu_Menu","List_Lista","src_FormContact_FormContact","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6d43ec3f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Lista = ({ infos, title }) => {\n\n    const infoList = infos.length ?\n        (\n            infos.map(i => {\n                return i.id > 0 ?\n                    (\n                        <li className=\"collection-item\">{i.info}</li>\n                    ) : null;\n            })\n        ) : (\n            <li className=\"collection-item\">Sem informações</li>\n        )\n\n    return (\n        <div>\n            <ul className=\"collection with-header\">\n                <li className=\"collection-header black\"><h4 className=\"white-text\">{title}</h4></li>\n                {infoList}\n            </ul>\n        </div>\n    )\n};\n\nexport default Lista;","import React, { Component } from 'react';\nimport './formContact.css'\nclass FormContact extends Component {\n\n    state = {\n        name: null,\n        email: null,\n        topic: null,\n        message: null\n    };\n\n    changeValue = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        });\n    };\n\n    formSubmit = (e) => {\n        e.preventDefault();\n        console.log(this.state);\n    }\n\n    render(){\n        return (\n            <div className=\"formContact\">\n                <h2>Entre em contato!</h2>\n                <form className=\"formContact-form\" onSubmit={ this.formSubmit }>\n                    <label htmlFor=\"name\">Nome:</label>\n                    <input type=\"text\" id=\"name\" onChange={ this.changeValue }></input>\n\n                    <label htmlFor=\"email\">Email:</label>\n                    <input type=\"email\" id=\"email\" onChange={ this.changeValue }></input>\n                    \n                    <label htmlFor=\"topic\">Assunto:</label>\n                    <input type=\"text\" id=\"topic\" onChange={ this.changeValue }></input>\n\n                    <label htmlFor=\"message\">Mensagem:</label>\n                    <input type=\"text\" id=\"message\" onChange={ this.changeValue }></input>\n\n                    <button >Enviar</button>\n                </form>\n            </div>\n        );\n    };\n};\n\nexport default FormContact;","import React from 'react';\n\nconst Menu = () => {\n    return (\n        <div className=\"navbar-fixed\">\n            <nav className=\"nav-wrapper black\">\n                <div className=\"container\">\n                    <ul className=\"left\">\n                        <li><a href=\"#\">Informações</a></li>\n                        <li><a href=\"#\">Blog</a></li>\n                        <li><a href=\"#\">Portfólio</a></li>\n                        <li><a href=\"#contact\">Contato</a></li>\n                    </ul>\n                </div>\n            </nav>\n        </div>\n    );\n}\n\nexport default Menu;","import React, { Component } from 'react';\nimport Lista from './List/Lista';\nimport FormContact from './FormContact/FormContact';\nimport Menu from './Menu/Menu';\nimport axios from 'axios';\n\nclass App extends Component {\n  state = {\n    habilidades: [\n      { info: 'Lindo', id: 0 },\n      { info: 'Gostoso', id: 1 },\n      { info: 'Cabelo', id: 2 }\n    ],\n    languages: []\n  }\n\n  componentDidMount(){\n    axios.get('').then(res => {\n      console.log(res)\n;    }); \n  }\n\n  render() {\n    return (\n      <div>\n        <Menu />\n        <div className=\"container\">\n          <Lista infos={ this.state.habilidades } title={ 'Habilidades' } />\n          <Lista infos={ this.state.languages } title={ 'Idiomas' } />\n          <FormContact id=\"contact\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}